题目描述
给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到
 一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。
 
 例如，我们从6767开始，将得到
 
 7766 - 6677 = 1089
 9810 - 0189 = 9621
 9621 - 1269 = 8352
 8532 - 2358 = 6174
 7641 - 1467 = 6174
 ... ...
 
 现给定任意4位正整数，请编写程序演示到达黑洞的过程。

输入描述:
输入给出一个(0, 10000)区间内的正整数N。


输出描述:
如果N的4位数字全相等，则在一行内输出“N - N = 0000”；否则将计算的每一步在一行内输出，直到6174作为差出现，输出格式见样例,每行中间没有空行。注意每个数字按4位数格
 式输出。

输入例子:
6767

输出例子:
7766 - 6677 = 1089
 9810 - 0189 = 9621
 9621 - 1269 = 8352
 8532 - 2358 = 6174

//有数字转字符串和字符串转数字
#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
bool cmp(int a, int b){
	return a > b;
}
void to_arr(int n, int num[]){
	for (int i =0; i <4;i++){
		num[i] = n % 10;
		n = n / 10;
	}
}
int to_int(int num[]){
	int n=0;
	for (int i = 0; i < 4; i++){
		n = n * 10 + num[i];
	}
	return n;
}
int main(){
	int n;
	int num[5];
	scanf("%d", &n);
	int min, max;
	while (1){
		to_arr(n, num);
		sort(num, num + 4);
		min = to_int(num);
		sort(num, num + 4, cmp);
		max = to_int(num);
		n = max - min;
		printf("%04d - %04d = %04d\n", max, min, n);//4位输出不够补0
		if (n == 0 || n == 6174) break;
	}
	return 0;
}
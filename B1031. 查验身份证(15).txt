一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：



首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得

到值Z；最后按照以下关系对应Z值与校验码M的值：



Z：0 1 2 3 4 5 6 7 8 9 10

M：1 0 X 9 8 7 6 5 4 3 2



现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。

输入描述:
输入第一行给出正整数N（<= 100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。


输出描述:
按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，

则输出“All passed”。

输入例子:
4
320124198808240056
12010X198901011234
110108196711301866
37070419881216001X

输出例子:
12010X198901011234

110108196711301866

37070419881216001X


思路：发现错误就输出


#include<cstdio>
#include<string.h>
const int maxn = 20;
char num[maxn];
char m[15] = {'1','0','X','9','8','7','6','5','4','3','2'};
int weight[17] = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 };
int main()
{
	int n;
	scanf("%d", &n);
	int right=0;
	for (int i = 0; i < n; i++){
		scanf("%s", &num);
		int z=0;
		int tag = 1;
		for (int j = 0; j < 17; j++)
		{
			if (num[j]<'0' || num[j]>'9')
			{
				tag = 0;
				break;
			}
			z += (num[j]-'0') * weight[j];
		}
		if (m[z % 11] == num[17]&&tag==1)
			right++;
		else
			printf("%s\n", num);
	}
	if (right == n)
		printf("All passed\n");
	return 0;
}
本题要求实现一种数字加密方法。首先固定一个加密用正整数A，对任一正整数B，将其每1位数字与A的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对13取余――这里用J代表10、Q代表11、K代表12；对偶数位，用B的数字减去A的数字，若结果为负数，则再加10。这里令个位为第1位。

输入格式：

输入在一行中依次给出A和B，均为不超过100位的正整数，其间以空格分隔。

输出格式：

在一行中输出加密后的结果。

输入样例：
1234567 368782971
输出样例：
3695Q8118



time 24m



#include<cstdio>
#include<string.h>
const int maxn = 110;
char a[maxn], b[maxn];
char radix[13] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'J', 'Q', 'K' };
int main()
{
	scanf("%s%s", &a, &b);
	int len1 = strlen(a), len2 = strlen(b);
	int count = 1,j=len1-1;
	for (int i = len2 - 1; i >= 0; i--){
		if (count % 2 == 0){
			int ch = b[i] - a[j];
			if (ch < 0)
				ch=ch + 10;
			b[i] = radix[ch];
			
		}
		else
		{
			int ch = (a[j]-'0') + (b[i]-'0');
			ch = ch % 13;
			b[i] = radix[ch];
		}
		if (j == 0)
			break;
		j--;
		count++;
	}
	for (int i = 0; i < len2; i++)
		printf("%c", b[i]);
	return 0;
}

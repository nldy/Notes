#include<iostream>
using namespace std;
double power(double x, double n){
	double val = 1.0;
	while (n--){
		val *= x;
	}
	return val;
}
int main(){
	double a, b;
	cin >> a >> b;
	cout << a<<" to the power "<<b<<" is "<<power(a,b) << endl;
	return 0;
}

/*
*************************************************************************
#include<iostream>
using namespace std;

double power(double x, double n);//计算次方

int main(){
	double a, b;
	cin >> a >> b;
	cout << a<<" to the power "<<b<<" is "<<power(a,b) << endl;
	return 0;
}
double power(double x, double n){
	double val = 1.0;
	while (n--){
		val *= x;
	}
	return val;
}
*/

/*
引用传递：可以认为是另一个变量的别名
声明一个引用是必须同时对它进行初始化
修改后，原变量改变
void swap(int &a,int &b)
*/

2.1引用传递 ：可以认为是另一个变量的别名
声明一个引用是必须同时对它进行初始化
修改后，原变量改变
void swap(int &a,int &b)

2.2内联函数 ：功能简单且规模较小又使用频繁的函数，避免调用函数影响程序执行效率
定义使用与普通函数一样，只需将关键字改为inline
Inline double area(double radius){
     return PI*radius*radius;
     return 0;
}

2.3带默认形参值的函数
有默认形参值的必须在形参列表的最后（从左到右的顺序建立对应关系）
int add(int x,int y=5,int z=6)

2.4函数重载 : 相同函数名，但形参个数和类型不同
注：不以形参名和返回值区分函数

2.5 C++函数 ：系统函数

2.6
全局变量：定义在函数之外
局部变量：放在一个函数之内
函数形参和局部变量用栈来储存，这钟栈叫运行栈
    它将栈中运行数据分为一个个栈帧，每个对应一次函数调用


******************************************************************************


#include<iostream>
using namespace std;

class Clock{
public:
	void setTime(int newH = 0, int newM = 0, int newS = 0);
	void showTime();
private:
	int hour, minute, second;
};//有“;”号
//类的成员函数具体实现需要限制::
void Clock::setTime(int newH, int newM, int newS){
	hour = newH;
	minute = newM;
	second = newS;
}
inline void Clock::showTime(){
	cout << hour << ":" << minute << ":" << second << endl;
}

int main(){
	Clock myClock;
	cout << "first time" << endl;
	myClock.setTime();
	myClock.showTime();
	cout << "second time" << endl;
	myClock.setTime(2, 30, 30);
	myClock.showTime();
	return 0;
}


3.1抽象：对具体问题进行概括，抽出一类对象的公共性质并加以描述的过程
数据抽象和行为抽象
前者是区别的状态特征，后者是共同行为的特征
例：对人进行抽象
数据抽象：string name ,string sex,int age
功能抽象：eat( ) , walk( ) , work( ) , study( )
封装：将数据与操作数据的函数代码结合形成“类”
继承：保持原有类的特性的基础上，进行更具体的详细说明
多态性：一段程序代码能够处理多种类型数据对象的能力
C++中实现形式（4种）:强制多态、重载多态、类型参数化多态、包含多态

3.2类和对象
类是面向对象程序设计方法的核心，利用类实现在逻辑上相关函数和数据的封装和隐蔽，它是对问题的抽象描述
定义一个类后，定义的该类的变量就称为类的对象或实例
声明：类名 对象名;
调用：对象名.函数成员名(参数表)
访问数据成员：对象名.数据成员名
调用成员函数：对象名.函数名(参数表)

3.3构造函数和析构函数
构造函数：对象被创建是利用特定值构造对象，将对象初始化为一个特定的状态，函数名与类名相同且没有返回值
复制构造函数：用一个已经存在的对象去初始化同类的一个新对象
类名(类名&对象名);  //复制构造函数

析构函数：完成对象删除前的一些清理工作，对象生存周期结束时自动调用。调用完成后释放相应空间
~类名( ){ };

3.4类的组合：一个类内嵌其他对象作为成员
类名::类名(形参表):内嵌对象1，内嵌对象2，……
{类的初始化}
//组合类的构造函数
Line::Line(Point xp1,Point xp2):p1(xp1),p2(xp2){ }

前向引用声明
使用一个类前要要定义，而在两个类相互引用的情况下，无论将哪个类定义放在前面都会编译错误。
解决：这时使用前向引用声明告诉编译器那是个类名。
class B
class A{	};
class B{	};

3.5结构体和联合体
原因：保持和C兼容，C++保留了struct关键字
这是代码风格问题，可以完全不使用结构体

3.6对象作为函数参数和返回值的传递方式
对于对象参数，需要调用复制构造函数，它的调用次数与编译器的优化程度有所差异

**************************************************************************************************


#include<iostream>
using namespace std;

int i;
namespace Ns{
	int j;
}

int main(){
	i = 5;//为全局变量i赋值
	Ns::j = 6;//为全局变量j赋值
	{                          //子块
		using namespace Ns;   //使当前块中可直接引用Ns命名空间的标识符
		int i;
		i = 7;//具有局部作用域的变量i把具有命名空间作用域的变量i隐蔽了
		cout << "i=" << i << endl;
		cout << "j=" << j << endl;
	}
	cout << "i=" << i << endl;
	return 0;
}

/*
*********************************************************************************
友元函数

#include<iostream>
using namespace std;

class line{
public:
	line(int x = 0) :x(x){}
	int getX(){ return x; }
	friend int dist(line &p1, line &p2);//友元函数声明
private:
	int x;
};
int dist(line &p1, line &p2){
	int len = p1.x + p2.x;
	return len;
}
int main(){
	line myp1(2), myp2(3);
	cout << "the length is " << dist(myp1,myp2) << endl;
	return 0;
}

*/


4.1作用域
具有命名空间作用域的变量称为全局变量
有效范围：命名空间作用域>类作用域>局部作用域
注：在多个具有包含关系的作用域中声明了同名标识符，则外层的标识符在内层看不见

4.2对象生存周期
静态变量：当一个函数返回后，下次再调用，该变量还会保持上一回的值，就算发生递归调用，也不会为该变量建立新的副本，该变量会每次调用间共享

4.3类的静态成员
为了达到共享与隐藏
静态成员解决同一个类的不同对象之间数据和函数共享问题
如：point(int x=0;int y=0):x(x),y(y){//构造函数，冒号后是赋值
//在构造函数中对count累加，所以对象共同维护同一个count
Count++;
}
Int point::count=0;	//静态数据成员定义和初始化，用类名限定（在主函数前）

4.4类的友元
提供了不同类或对象的成员函数之间，类的成员函数与一般函数之间进行数据共享的机制

友元函数：在类中用关键字friend修饰的非成员函数，可通过对象名访问类的私有和保护成员
直接用它就可以访问不同对象之间的数据进行计算这些

友元类：若A类为B类友元类，则A类所有成员函数都是B类的友元函数，都可以访问B类的私有和保护成员
注：1.  友元关系不能传递
2.友元关系是单向的
3.友元关系不被继承

3.5常对象：它的数据成员值在对象的整个生存周期建不能被改变。
常对象必须初始化，而且不能被更新
const int n=10;

3.6多文件结构
C++要求一个类的定义必须出现在所有使用该类的编译单元中
做法：将类的定义写在头文件中，使用该类的编译单元则包含这个头文件
一个项目组成：至少划分为类定义文件（*.h文件）、类实现文件（*.cpp文件）、类的使用文件(*.cpp，主函数文件)3个文件


****************************************************************************************************************


5.1数组
声明：int a[5][3];
初始化:int  a[3]={1,1,1};
int a[2][3]={ {1,0,0} , {0,1,0} };
注：使用数组名传递数据时，传递的是地址
void function(int a[][4],int n){ } //函数定义

对象数组
不光具有数据成员，还有函数成员。
注意初始化的需要（初值是否相同）

5.2指针
指针变量：存放内存单元地址
数据类型 *标识符;
int *p;
“*”称为指针运算符，表示获取指针所指向的变量的值
“&”称为去地址运算符，用来得到一个对象的地址
int a;	//int a[10];
int *p;
p=&a;	//p=a;
注：指针可跟整数0比较，0专门表示空指针，说明这个地址不指向任何有效的指针
int *p;	p=0;

指针数组：每个元素都是同一类型的指针，必须先赋值后引用
数据类型 *数组名[下标]；
p[i][j]与*(p[i]+j)等价，前者写法就像数组一样用

动态内存分配：针对不确定数量的元素
C++中为堆对象，包含建立和删除
建立：new 数据类型（初始化参数表）
删除：delete 指针名
int *p=new int;	//初始化赋值 int *p=new in(2);
delete p;
注：用new 建立的数组，在用delete删除是要加[ ]
delete [ ] p;

5.3字符串
string类

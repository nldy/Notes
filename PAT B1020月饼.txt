题目描述
月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需

求量，请你计算可以获得的最大收益是多少。



注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，总售价分别为75、

72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、以及5万吨第3种月饼，获得

 72 + 45/2 = 94.5（亿元）。

输入描述:
每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）的正整数

D表示市场最大需求量。随后一行给出N个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正数表示每种月饼的总售价（以亿

元为单位）。数字间以空格分隔。


输出描述:
对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。
输入例子:
3 20
18 15 10
75 72 45

输出例子:
94.50


#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct Kind{
	double store;
	double sumprice;
	double price;
}kin[10010];
bool cmp(Kind a, Kind b) {
	return a.price>b.price;
}
int main(){	//利用排队思想
	int n;
	double need;
	while (scanf("%d %lf", &n, &need) != EOF){//double输入要用%lf
		double sum = 0;
		for (int i = 0; i < n; i++)
			scanf("%lf", &kin[i].store);
		for (int i = 0; i < n; i++)
			scanf("%lf", &kin[i].sumprice);
		for (int i = 0; i < n; i++)
			kin[i].price = kin[i].sumprice / kin[i].store;

		sort(kin, kin + n, cmp);

		for (int i = 0; i < n; i++){
			if (kin[i].store < need)
			{
				need = need - kin[i].store;
				sum += kin[i].sumprice;
			}
			else
			{
				sum += need*kin[i].price;
				break;
			}
		}
		printf("%.2f\n", sum);

	}
	return 0;
}
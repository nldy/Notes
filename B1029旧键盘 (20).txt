旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出

肯定坏掉的那些键。

输入描述:
输入在2行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过80个字符的串，由字母A-Z（包括大、小写）、数字0-9、

以及下划线“_”（代表空格）组成。题目保证2个字符串均非空。


输出描述:
按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有1个坏键。

输入例子:
7_This_is_a_test
_hs_s_a_es

输出例子:
7TI

time 22m
思路：用结构体数组储存出错的键和第一出现的次序，按字符大小的下标直接储存，之后排序输出
学习：用数组大小为128，刚好是ASCII码个数，在检测时就输出不用排序

#include<cstdio>
#include<algorithm>
#include<string.h>
using namespace std;
const int maxn = 100;
char str1[maxn], str2[maxn];
struct Broken{
	char ch;
	int order=111;
	bool flag=false;
}br[maxn];
bool cmp(Broken a, Broken b){
	return a.order < b.order;
}
int main()
{
	int len1, len2;
	scanf("%s%s", &str1, &str2);
	len1 = strlen(str1);
	len2 = strlen(str2);
	int j = 0;
	for (int i = 0; i < len1; i++){
		if (str1[i] == str2[j])
		{
			j++;
		}
		else{
			if (str1[i] <= '9' && str1[i] >= '0'){
				if (br[str1[i] - '0'].order == 111){
					br[str1[i] - '0'].order = i;
					br[str1[i] - '0'].ch = str1[i];
					br[str1[i] - '0'].flag = true;
				}
			}
			else if (str1[i] == '_')
			{
				if (br[10].order == 111)
				{
					br[10].order = i;
					br[10].ch = str1[i];
					br[10].flag = true;
				}
			}
			else {
				char c;
				c = str1[i];
				if (str1[i] <= 'z'&&str1[i] >= 'a')
					c = 'A' + (str1[i] - 'a');
				if (br[(c - 'A') + 11].order == 111){
					br[(c - 'A') + 11].order = i;
					br[(c - 'A') + 11].ch = c;
					br[(c - 'A') + 11].flag = true;
				}
			}
		}
	}
	sort(br, br + maxn, cmp);
	for (int i = 0; i < maxn; i++)
	{
		if (br[i].flag == true)
			printf("%c", br[i].ch);
	}
	return 0;
}
英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数”E，即满足有E天骑车超过E英里的最大整数E。据说爱丁顿自己的E等于87。

现给定某人N天的骑车距离，请你算出对应的爱丁顿数E（<=N）。

输入格式：

输入第一行给出一个正整数N（<=105），即连续骑车的天数；第二行给出N个非负整数，代表每天的骑车距离。

输出格式：

在一行中给出N天的爱丁顿数。

输入样例：
10
6 7 6 9 3 10 8 2 7 8
输出样例：
6

题意：查询的公里数逐渐变大，骑行超过当前公里数的天数逐渐减少，当两者最接近的时候，就是题目要求的答案
从下标1开始存储n天的公里数在数组a中，对n个数据从大到小排序，i表示了骑车的天数，那么满足a[i] > i的最大值即为所求

#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn = 100010;
int n, num[maxn];
bool cmp(int a, int b){
	return a > b;
}
int main()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", &num[i]);
	sort(num+1 , num + n+1,cmp );
	int e = 0, p = 1;//骑行第一天有0天超过第一天骑行的公里数
	while (e <= n&&num[p] > p)
	{
		e++;
		p++;
	}
	printf("%d", e);
	return 0;
}
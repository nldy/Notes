Eva loves to collect coins from all over the universe, including some other planets like Mars.  One day she visited a universal shopping mall which could accept all kinds of coins as payments.  However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount.  Since she has as many as 105 coins with her, she definitely needs your help.  You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.

输入描述:
Each input file contains one test case.  For each case, the first line contains 2 positive numbers: N (<=105, the total number of coins) and M(<=103, the amount of money Eva has to pay).  The second line contains N face values of the coins, which are all positive numbers no more than 500.  All the numbers in a line are separated by a space.


输出描述:
For each test case, print in one line the two face values V1 and V2 (separated by a space) such that V1 + V2 = M and V1 <= V2.  If such a solution is not unique, output the one with the smallest V1.  If there is no solution, output "No Solution" instead.

输入例子:
8 15
1 2 8 7 2 4 11 15

输出例子:
4 11


time 30m
思路：把钱币大小排序后，取最大和最小两头开始看是否有相等的
学习：散列表，两头的数存在，且保证是一对数hash[i]、hash[m-i]

#include<cstdio>
#include<algorithm>
#include<string.h>
using namespace std;
const int maxn = 100010;
int coin[maxn],minv1=0;
//bool have[maxn];
int main()
{
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++)
	{
		scanf("%d", &coin[i]);
		//have[coin[i]] = true;
	}
	sort(coin+1, coin + n+1);
	int v1=-1, v2=-1;
	for (int i = 1; i <= n; i++){
		int j = n ;
		while ((coin[i] + coin[j])>m&&j>0){
			j--;
		}
		if (coin[i] + coin[j] == m){
			v1 = coin[i], v2 = coin[j];
			break;
		}
	}
	if (v1 > 0 && v2 > 0)
		printf("%d %d", v1, v2);
	else
		printf("No Solution");
	return 0;
}
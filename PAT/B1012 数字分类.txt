给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：

A1 = 能被5整除的数字中所有偶数的和；

A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4...；

A3 = 被5除后余2的数字的个数；

A4 = 被5除后余3的数字的平均数，精确到小数点后1位；

A5 = 被5除后余4的数字中最大数字。

输入描述:
每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。


输出描述:
对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。

若其中某一类数字不存在，则在相应位置输出“N”。

输入例子:
13 1 2 3 4 5 6 7 8 9 10 20 16 18

输出例子:
30 11 2 9.7 9

注意：0是偶数，但不是正整数
感觉用5个数储存简洁点
8 1 2 4 5 6 7 9 16
N 11 2 N 9

#include<cstdio>
int main(){
	int n,i=1,j=0;
	double num[5] = { 0 };
	scanf("%d", &n);
	while (n--){
		int nn;
		scanf("%d", &nn);
		if (nn % 5 == 0 && nn % 2 == 0)
			num[0] += nn;
		else if (nn % 5 == 1){
			num[1] += i*nn;
			if (i == 1)
				i = -1;
			else
				i = 1;
		}
		else if (nn % 5 == 2)
			num[2]++;
		else if (nn %5== 3)
		{
			num[3]+=nn;
			j++;
		}
		else if (nn % 5 == 4){
			if (nn > num[4])
				num[4] = nn;
		}
	}
	for (int i = 0; i < 5; i++){
		if (num[i] == 0)
			printf("N");
		else if (i == 3&&num[i]!=0)
			printf("%0.1f", num[i]/j);	//直接在输出时候处理数据
		else
		{
			printf("%.0f", num[i]);
		}
		if (i < 4)
			printf(" ");
	}
	return 0;
}

*******************************************************
//学习
#include <stdio.h>
 
int main()
{
    int N;
    scanf("%d", &N);
    int A1 = 0, A2 = 0,A5 = 0;
    float A4 = 0.0;
    int c2 = 0, c3 = 0, c4 = 0, c5 = 0;
    int x;
    int k = 1;
    while(N--){
        scanf("%d", &x);
        switch(x % 5){
            case 0: if(x % 2 == 0) A1 += x;break;
            case 1: A2 += x*k; k = -k; c2++; break;
            case 2: c3++; break;
            case 3: A4 += x; c4++; break;
            case 4: if(A5 < x) A5 = x; c5++; break;
        }
    }
 
    (A1 != 0) ? printf("%d ", A1): printf("N ");
    (c2 != 0) ? printf("%d ", A2): printf("N ");
    (c3 != 0) ? printf("%d ", c3): printf("N ");
    (c4 != 0) ? printf("%.1f ", A4/c4): printf("N ");
    (c5 != 0) ? printf("%d", A5): printf("N");
 
    return 0;
 
}
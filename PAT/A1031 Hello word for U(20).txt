Given any string of N (>=5) characters, you are asked to form the
characters into the shape of U.  For example, "helloworld" can
be printed as: 
h  d
e  l
l  r
lowo

 That is, the characters must be printed in the original order, starting
top-down from the left vertical line with n1 characters, then left to
right along the bottom line with n2 characters, and finally bottom-up
along the vertical line with n3 characters.  And more, we would like U
to be as squared as possible -- that is, it must be satisfied that n1 =
n3 = max { k| k <= n2 for all 3 <= n2 <= N } with n1 + n2 + n3
- 2 = N.

输入描述:
Each input file contains one test case.  Each case contains one string with no less than 5 and no more than 80 characters in a line.  The string contains no white space.


输出描述:
For each test case, print the input string in the shape of U as specified in the description.

输入例子:
helloworld!

输出例子:
h   !
e   d
l   l
lowor

思路：(1)控制格式直接输出，求出竖着和横着的个数，它们最大不过(N+2)/3
n1 = (len + 2) / 3;
n2 = len - (n1-1) * 2;
（2）用二维数组储存，然后打印

#include<cstdio>
#include<string.h>
const int maxn = 100;
char str[maxn] ;
int main()
{
	int n1=0, n2=0,len=0;
	scanf("%s", &str);
	len = strlen(str);
	n1 = (len + 2) / 3;
	n2 = len - (n1-1) * 2;
	for (int i = 0; i < (len-n1+1); i++){
		printf("%c", str[i]);
		if (i < n1-1){
			for (int j = 0; j < (n2 - 2); j++)
				printf(" ");
			printf("%c\n", str[len - i-1]);
		}
	}
	return 0;
}
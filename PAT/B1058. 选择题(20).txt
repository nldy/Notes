批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。

输入格式：

输入在第一行给出两个正整数N（<=1000）和M（<=100），分别是学生人数和多选题的个数。随后M行，每行顺次给出一道题的满分值（不超过5的正整数）、选项个数（不少于2且不超过5的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母a开始顺次排列。各项间以1个空格分隔。最后N行，每行给出一个学生的答题情况，其每题答案格式为“(选中的选项个数 选项1 ……)”，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。

输出格式：

按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从1开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出“Too simple”。

输入样例：
3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (2 b d) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (2 b c) (4 a b c d)
输出样例：
3
6
5
2 2 3 4

思路：格式化输入
问题：那个题目总数有什么用

#include<cstdio>
#include<string.h>
//#include<iostream>
#include<algorithm>
using namespace std;
//const int maxn = 100010;
int n, m;
struct Problem{
	int order, per, choose, rchoose, err = 0;
	int right[10];
}pro[110];
bool cmp(Problem a, Problem b){
	if (a.err != b.err)
		return a.err > b.err;
	else return a.order < b.order;
}
int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++){
		pro[i].order = i + 1;
		scanf("%d%d%d", &pro[i].per, &pro[i].choose, &pro[i].rchoose);

		for (int j = 0; j < pro[i].rchoose; j++){
			getchar();
			char ch;
			scanf("%c", &ch);
			pro[i].right[ch - 'a'] = 1;
		}
	}
	getchar();
	for (int i = 0; i < n; i++){
		int sum = 0;
		for (int j = 0; j < m; j++){
			int num;
			scanf("(%d", &num);
			char str[3];
			bool go = true;
			for (int k = 0; k < num; k++){
				scanf("%s", str);
				if (pro[j].right[str[0] - 'a'] == 1&&pro[j].rchoose==num)
					continue;
				else if (go==true)
				{
					pro[j].err++;
					go = false;
				}
			}
			getchar();//吸收
			if (go == true)
				sum += pro[j].per;
		}
		printf("%d\n", sum);

	}
	sort(pro, pro + m, cmp);
	if (pro[0].err == 0)
		printf("Too simple\n");
	else{
		printf("%d %d", pro[0].err, pro[0].order);
		int i = 1;
		while (pro[i].err == pro[0].err){
			printf(" %d", pro[i++].order);
		}
	}
	return 0;
}

学习：
#include <cstdio>  
    #include <vector>  
    #include <set>  
    using namespace std;  
    int main() {  
        int n, m, temp, k;  
        scanf("%d%d", &n, &m);  
        vector< set<char> > right(m);       //存放每道题正确的选项
        vector<int> total(m), wrongCnt(m);  //wrongCnt[]保存每道题的错误次数
        for(int i = 0; i < m; i++) {  
            scanf("%d%d%d", &total[i], &temp, &k);  
            for(int j = 0; j < k; j++) {  
                char c;  
                scanf(" %c", &c);  
                right[i].insert(c);  //保存正确的选项
            }  
        }  
        for(int i = 0; i < n; i++) {  
            int score = 0;              //当前这个人的得分
            scanf("\n");  
            for(int j = 0; j < m; j++) {  
                if(j != 0) scanf(" ");  
                scanf("(%d", &k);  
                set<char> st;           //st保存每道题的作答情况
                char c;  
                for(int l = 0; l < k; l++) {  
                    scanf(" %c", &c);  
                    st.insert(c);  
                }  
                scanf(")");  
                if(st == right[j])   //如果每道题的作答情况与正确答案一致，计算当前人的得分
                    score += total[j];  
                else
                    wrongCnt[j]++;  //如果不一致则这道题的错误次数加1
            }  
            printf("%d\n", score);  
        }  

        int maxWrongCnt = 0;  
        for(int i = 0; i < m; i++) {    //找出最大错误次数
            if(wrongCnt[i] > maxWrongCnt) {  
                maxWrongCnt = wrongCnt[i];  
            }  
        }  
        if(maxWrongCnt == 0)  
            printf("Too simple");  
        else {  
            printf("%d", maxWrongCnt);  
            for(int i = 0; i < m; i++) {  //如果有错误次数一样多的题则输出题的编号即下标+1
                if(wrongCnt[i] == maxWrongCnt) {  
                    printf(" %d", i + 1);  
                }  
            }  
        }  
        return 0;  
    }  
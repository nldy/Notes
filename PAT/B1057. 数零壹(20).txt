给定一串长度不超过105的字符串，本题要求你将其中所有英文字母的序号（字母a-z对应序号1-26，不分大小写）相加，得到整数N，然后再分析一下N的二进制表示中有多少0、多少1。例如给定字符串“PAT (Basic)”，其字母序号之和为：16+1+20+2+1+19+9+3=71，而71的二进制是1000111，即有3个0、4个1。

输入格式：

输入在一行中给出长度不超过105、以回车结束的字符串。

输出格式：

在一行中先后输出0的个数和1的个数，其间以空格分隔。

输入样例：
PAT (Basic)
输出样例：
3 4

time 17m
思路：输入时判断，转换成数N，再转换二进制时判断有多少0和1

#include<cstdio>
#include<string.h>
//#include<iostream>
//#include<algorithm>
//using namespace std;
const int maxn = 100010;
char str[maxn];
int n=0, zero=0, one=0;
int main()
{
	gets(str);
	int len = strlen(str);
	for (int i = 0; i < len; i++){
		if (str[i] >= 'a'&&str[i] <= 'z') 
			n += 1+(str[i] - 'a');
		if (str[i] >= 'A'&&str[i] <= 'Z')
			n += 1+(str[i] - 'A');
	}
	if (n != 0){
		do{
			int num = n % 2;
			if (num == 0)
				zero++;
			else if (num == 1)
				one++;
			n = n / 2;
		} while (n != 0);
	}
	printf("%d %d", zero, one);
	return 0;
}
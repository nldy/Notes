卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。

当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。

现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。

输入格式：每个测试输入包含1个测试用例，第1行给出一个正整数K(<100)，第2行给出K个互不相同的待验证的正整数n(1<n<=100)的值，数字间用空格隔开。

输出格式：每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。

输入样例：
6
3 5 6 7 8 11
输出样例：
7 6

time 30m
思路：用一个数组记录是否计算过，用一个数组记录是不是被覆盖
学习：用一个就可以了

#include<cstdio>
#include<string.h>
#include<algorithm>
using namespace std;
const int maxn = 10005;
bool num[maxn];
bool in[maxn];
void check(int n){
	int k = n;
	if (num[n] == false){
		in[k] = true;
		while (n != 1){
			if (num[n] == true){
				in[n] = false;
				break;
			}
			else{
				num[n] = true;
			}
			if (n % 2 == 0){
				n = n / 2;
			}
			else
				n = (n * 3 + 1)/2;
		}
		num[k] = true;
	}
}
int main(){
	int n;
	scanf("%d", &n);
	int a[105];
	for (int i = 0; i < n; i++){
		scanf("%d", &a[i]);
		check(a[i]);
	}
	int j = 0;
	sort(a, a + n);
	for (int i = n-1; i >=0; i--){
		if (in[a[i]] == true){
			if (j == 1)
				printf(" ");
			printf("%d", a[i]);
			if (j == 0)
				j = 1;
		}
	}
	return 0;
}

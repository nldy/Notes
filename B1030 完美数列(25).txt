给定一个正整数数列，和正整数p，设这个数列中的最大值是M，最小值是m，如果M <= m * p，则称这个数列是完美数列。
现在给定参数p和一些正整数，请你从中选择尽可能多的数构成一个完美数列。

输入描述:
输入第一行给出两个正整数N和p，其中N（<= 105）是输入的正整数的个数，p（<= 109）是给定的参数。第二行给出N个正整数，每个数

不超过109。


输出描述:
在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。

输入例子:
10 8
2 3 20 4 5 1 6 7 8 9

输出例子:
8

3 3
1 2 3

思路：二分法，使用upper_bound()，寻找第一个值大于val的元素位置
注：对数组使用upper_bound（）返回的是指针，所以要减数组首地址

#include<cstdio>
#include<algorithm>
#include<string.h>
using namespace std;
const int maxn = 100010;
int num[maxn];
int main()
{
	int n,p;
	scanf("%d%d", &n, &p);
	for (int i = 0; i < n; i++){
		scanf("%d", &num[i]);
	}
	sort(num, num +n);
	int maxnum = 1;
	for (int i = 0; i < n; i++){
		int j = upper_bound(num + i + 1, num + n, (long long)num[i] * p)-num;
		maxnum = max(maxnum, j-i);
	}
	printf("%d\n", maxnum);
	return 0;
}
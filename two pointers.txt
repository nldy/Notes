//二路归并排序
const int maxn = 100;
//将数组a的[L1,r1]和[L2,r2]合并为有序区间
void merge(int a[], int L1, int r1, int L2, int r2){
	int i = L1,j=L2;
	int temp[maxn], index = 0;
	while (a[i] < a[j] && j < r2){
		if (a[i] <= a[j])	//因为两个区间都是排好序的，不满足这个条件时，剩下的都是比另一个区间大的
			temp[index++] = a[i++];
		else
			temp[index++] = a[j++];
	}
	while (i <= r1)
		temp[index++] = a[i++];
	while (j <= r2)
		temp[index++] = a[j++];
	for (i = 0; i < index; i++)
		a[i] = temp[i];//复制给原数组
}
//合并函数
void mergeSort(int a, int left, int right){
	if (left < right)
	{
		int mid = (left + right) / 2;
		mergeSort(a, left, mid);
		mergeSort(a, mid + 1, right);
		merge(a, left, mid, mid + 1, right);
	}
}

//快速排序
#include<time.h>
#include<stdlib.h>// C中产生随机数

int randpartition(int a[], int left, int right){
	int p=(round(1.0*rand()/RAND_MAX*(right-left)+left);//生成随机数
	swap(a[p],a[left];//交换,left是主元，左侧都小于主元，右侧都大于主元

	int temp = a[left];
	while (left < right){
		while (left<right&&a[right]>temp)
			right--;
		a[left] = a[right];
		while (left < right&&a[left] < temp)
			left++;
		a[right] = a[left];
	}
	a[left] = temp;
	return left;
}
void quickSort(int a[], int left, int right){
	if (left < right){
		int pos = randpartition(a, left, right); 
		quickSort(a, left, pos - 1);
		quickSort(a, pos + 1, right);
	}
}
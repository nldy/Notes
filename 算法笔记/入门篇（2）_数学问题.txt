1.最大公约数：gcd(a,b)
3和9的最大公约数为3
求解：辗转相除法
递归式：gcd(a,b)=gcd(b,a%b)	递归边界：gcd(a,0)=a
int gcd(int a,int b) { return !bagcd(b,a%b); }
0与任意一个整数a的最大公约数都是a（不是0）

最小公倍数
在求出最大公约数d基础上马上就能求出
最小公倍数=adb

2.分数的四则运算
分数表示
struct Fraction {	long long up,down; 	};
预定规则：（1）分数为负，分子up为负
（2）up为0，分母down为1
（3）分子分母没有除了1以外的公约数
化简求出分子分母绝对值的最大公约数，然后同时除以最大公约数
计算：Fraction result;	result.up=;	result.down=;
输出：注意带分数形式

3.素数：又称质数，除了1和它本身外，不能被其他数整除
对应的是合数
注：1不是素数也不是合数
判定：n能否被2，3……sqrt(n)中的一个整除
假定存在约数k，则k(nk)==n，那么k与nk中一定满足一个小于sart(n)，一个大于
for( int i=2; ii=n ;i++) { if(n%i==0) return false ; }
时间复杂度O(sqrt(n))
筛选法：2是素数，筛去2的倍数，它们不可能是素数
时间复杂度O(nloglogn)

4.质因式分解：将一个正整数写成一个或多个质数的乘积形式
质数就是素数
质因子可以出现不止一次，利用结构体数组fac存放质因子及出现次数
对于int范围，最小的10个质数相乘都超出int范围，因此fac数组开到10就行
思路：（1）枚举1~sqrt(n)范围内所有质因子，判断是否是n的因子，加入fac数组，个数设为0，只要后面还有就加1
（2）若第一步结束后n仍然大于1，说明n有且仅有一个大于sqrt(n)的质因子，加入fac数组，个数为1
（3）fac数组存放的就是质因式分解结果

5.大整数运算
大整数：高精度整数，用基本类型无法储存其精度的整数
存储：利用数组，整数高位储存在数组的高位
把整数按%s读入时是逆位储存的，因此在读入后需要反转一下
反转：a.len=strlen(str);		a.d[i]=str[a.len-i-1]-’0’ ;
为了获取长度，用结构体定义变量len
bign(){	int d[1000];	int len;
bign(){	memset(d,0,sizeof(d));	len=0;	}	每次自动初始化
}
比较大小：（1）判断len大小
（2）从高位判断for(int i=a.len-1;i=0;i--){	}

减法
if(a.d[i]b.d[i]){	a.d[i+1]--;		a.d[i]+=10;	}不够减，借位
while(c.len-1=1 && c.d[c.len-1]==0){	c.len--; }去除高位0，同时保留至少1位

乘法：两数相乘，把一个视为bign类型，另一个视为int类型
取bign某位与int整数相乘，再与进位相加，所得个位数作为该位结果，高位部分做新的进位
for(int i=0;ia.len;i++){	int temp=a.d[i]b+carry; 	carry=tem[10;	进位}
while(carry!=0){	}	进位可能不止一位所以用while加上去

除法：与我们计算相同
不够除，商为0，注意高位可能为0要去掉


6.扩展欧几里得算法
有题目再看

7.组合数
求n！中有多少个质因子p
int cal(int n,int p){
if(np) return 0; 不可能有质因子
return np+cal(np,p);
}

组合数：表示在n个物品中选取m个物品
线性写法中被写作C(m,n)
存在下述公式 C(n,m)= C(n,n-m)= C(n-1,m-1)+C(n-1,m)
通过递推公式：
long long C(long long n,long long m){	
if(m==0m==n) return 1;
return C(n-1,m)+c(n-1,m-1);
}
定义式变形,时间复杂度为O(m)
long long C(long long n,long long m){	
long long ans=1;
for(long long i=1;i=m;i++){
ans=ans(n-m+i)i;
}
return ans;
}

计算C(m,n)%p,很好支持m=n=1000
int res[1010][1010]={0};
return res[n][m]=(C(n-1,m)+c(n-1,m-1))%p;

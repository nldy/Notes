The ranklist of PAT is generated from the status list, which shows the scores of the submittions.  This time you are supposed to generate the ranklist for PAT.

输入描述:
Each input file contains one test case.  For each case, the first line contains 3 positive integers, N (<=104), the total number of users, K (<=5), the total number of problems, and M (<=105), the total number of submittions.  It is then assumed that the user id's are 5-digit numbers from 00001 to N, and the problem id's are from 1 to K.  The next line contains K positive integers p[i] (i=1, ..., K), where p[i] corresponds（关系） to the full mark（满分） of the i-th problem.  Then M lines follow, each gives the information of a submittion in the following format:

user_id problem_id partial_score_obtained

where partial_score_obtained is either -1 if the submittion cannot even pass the compiler, or is an integer in the range [0, p[problem_id]].  All the numbers in a line are separated by a space.


输出描述:
For each test case, you are supposed to output the ranklist in the following format:

rank user_id total_score s[1] ... s[K]

where rank is calculated according to the total_score, and all the users with the same total_score obtain the same rank; and s[i] is the partial score obtained for the i-th problem.  If a user has never submitted a solution for a problem, then "-" must be printed at the corresponding position.  If a user has submitted several solutions to solve one problem, then the highest score will be counted.

The ranklist must be printed in non-decreasing order of the ranks.  For those who have the same rank, users must be sorted in nonincreasing order according to the number of perfectly solved problems（得到满分）.  And if there is still a tie, then they must be printed in increasing order of their id's.  For those who has never submitted any solution that can pass the compiler, or has never submitted any solution, they must NOT be shown on the ranklist.  It is guaranteed that at least one user can be shown on the ranklist.

输入例子:
7 4 20
20 25 25 30
00002 2 12
00007 4 17
00005 1 19
00007 2 25
00005 1 20
00002 2 2
00005 1 15
00001 1 18
00004 3 25
00002 2 25
00005 3 22
00006 4 -1
00001 2 18
00002 1 20
00004 1 15
00002 4 18
00001 3 4
00001 4 2
00005 2 -1
00004 2 0

输出例子:
1 00002 63 20 25 - 18
2 00005 42 20 0 22 -
2 00007 42 - 25 - 17
2 00001 42 18 18 4 2
5 00004 40 15 0 25 -

4 3 8
20 30 40
00001 1 15
00001 3 20
00002 2 0
00002 3 0
00003 1 20
00003 2 15
00004 1 -1
00004 3 -1

注意：结构体里面的数组单独写一个函数初始化

#include<cstdio>
#include<algorithm>
#include<string.h>
using namespace std;
const int maxn = 10010;
int  n, k, m, pscore[10];
struct People{
	int problem[10] ;
	int name,score,solve, rank;
	bool flag;
}pe[maxn];
bool cmp(People a, People b){
	if (a.score != b.score) return a.score > b.score;
	else if (a.solve != b.solve) return a.solve > b.solve;
	else return a.name< b.name;
}
void init(){
	for (int i = 0; i <= n; i++){
		pe[i].name = i;
		pe[i].score = 0;
		pe[i].solve = 0;
		pe[i].flag = false;
		memset(pe[i].problem, -1, sizeof(pe[i].problem));
	}
}
int tonum(char str[]){
	int  sum = 0;
	int len = strlen(str);
	for (int i=0; i <len; i++){
		sum = sum * 10 + (str[i] - '0');
	}
	return sum;
}
int main()
{
	scanf("%d%d%d", &n,&k,&m);
	init();
	for (int i = 1; i <= k;i++)
		scanf("%d",&pscore[i]);
	for (int i = 0; i < m; i++){
		char arr[10];
		int id,pid, ps;
		scanf("%s%d%d", &arr, &pid, &ps);
		id = tonum(arr);
		if (ps != -1)
			pe[id].flag = true;
		if (pe[id].problem[pid] == -1 && ps == -1)
			pe[id].problem[pid] = 0;
		if (ps == pscore[pid] && pe[id].problem[pid]<ps)
			pe[id].solve++;
		if (pe[id].problem[pid] <= 0 && ps >=0)
		{
			pe[id].problem[pid] = ps;
			pe[id].score += ps;
		}
		else if (pe[id].problem[pid] > 0 && ps>pe[id].problem[pid])
		{
			pe[id].score += (ps - pe[id].problem[pid]);
			pe[id].problem[pid] = ps;
		}
		
	}
	sort(pe+1, pe + n+1, cmp);
	pe[1].rank = 1;
	for (int i = 2; i <= n; i++){
		if (pe[i].score == pe[i - 1].score)
			pe[i].rank = pe[i - 1].rank;
		else
			pe[i].rank = i;
	}
	for (int i = 1; i <= n; i++){
		if (pe[i].flag == false)
			continue;
		printf("%d %05d %d",pe[i].rank , pe[i].name,pe[i].score);
		for (int j = 1; j <= k; j++)
		{
			if (pe[i].problem[j] >= 0)
				printf(" %d", pe[i].problem[j]);
			else
				printf(" -");
		}
		printf("\n");
	}
	return 0;
}